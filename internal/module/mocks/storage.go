// Code generated by MockGen. DO NOT EDIT.
// Source: ./module.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "homework-3/internal/models"
	storage "homework-3/internal/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorage) AddOrder(arg0 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageMockRecorder) AddOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorage)(nil).AddOrder), arg0)
}

// CheckExistanceOrder mocks base method.
func (m *MockStorage) CheckExistanceOrder(arg0 models.OrderId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistanceOrder", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistanceOrder indicates an expected call of CheckExistanceOrder.
func (mr *MockStorageMockRecorder) CheckExistanceOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistanceOrder", reflect.TypeOf((*MockStorage)(nil).CheckExistanceOrder), arg0)
}

// GetAddresseeIds mocks base method.
func (m *MockStorage) GetAddresseeIds(orderIds map[models.OrderId]interface{}) (map[models.AddresseeId][]models.OrderId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresseeIds", orderIds)
	ret0, _ := ret[0].(map[models.AddresseeId][]models.OrderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresseeIds indicates an expected call of GetAddresseeIds.
func (mr *MockStorageMockRecorder) GetAddresseeIds(orderIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresseeIds", reflect.TypeOf((*MockStorage)(nil).GetAddresseeIds), orderIds)
}

// ListOrders mocks base method.
func (m *MockStorage) ListOrders(arg0 models.AddresseeId) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStorageMockRecorder) ListOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStorage)(nil).ListOrders), arg0)
}

// ListRefund mocks base method.
func (m *MockStorage) ListRefund(arg0, arg1 int64) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRefund", arg0, arg1)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRefund indicates an expected call of ListRefund.
func (mr *MockStorageMockRecorder) ListRefund(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRefund", reflect.TypeOf((*MockStorage)(nil).ListRefund), arg0, arg1)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(arg0 models.OrderId, arg1 storage.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), arg0, arg1)
}
